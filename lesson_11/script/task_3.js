'use strict'

// –ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π. –í–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –Ω–∞ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–æ–º—É –ø–æ–ª—ñ —Ä–æ–∑–º—ñ—Ä–æ–º 6*6 —Ä–æ–∑—Ç–∞—à–æ–≤—É—î—Ç—å—Å—è 5 –∫–æ—Ä–∞–±–ª—ñ–≤. 
// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç—Ä—ñ–ª—è—î –≤–∫–∞–∑—É—é—á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –ì—Ä–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è –ø–æ–∫–∏ –Ω–µ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ —É—Å—ñ –∫–æ—Ä–∞–±–ª—ñ 
// –∞–±–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–∞–∫—ñ–Ω—á–∞—Ç—å—Å—è —Å–Ω–∞—Ä—è–¥–∏.

if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    // !!! –ù–∞–∂–∞–ª—å —Ñ—É–Ω–∫—Ü—ñ—è getFight() –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü –≤ –æ–±–æ—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
    const countCell = 6
    const numberShips = 5

    const getRandomShip = (cellElement, min, max) => Array.from(
        { length: cellElement },
        () => min + Math.floor(Math.random() * (max - min + 1))
    )

    const getGeneratedShips = (shipCount, cellCount, min, max) => Array.from(
        { length: shipCount },
        () => getRandomShip(cellCount, min, max)
    )

    const generateShips = getGeneratedShips(numberShips, 2, 0, numberShips)

    function getFight(ships, cell) {
        let copySHips = JSON.parse(JSON.stringify(ships))
        let countShots = parseInt(prompt('–°–ª—ñ–ª—å–∫–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–Ω–∞—Ä—è–¥—ñ–≤?', '10'))
        let count = 0
        let recordShots = []

        while (copySHips.length > 0 && countShots > 0) {
            alert(`–£ –≤–∞—Å ${copySHips.length} –∫–æ—Ä–∞–±–ª—ñ–≤, –Ω–∞ —ó—Ö –∑–Ω–∏—â–µ–Ω–Ω—è —É –≤–∞—Å —î ${countShots} —Å–Ω–∞—Ä—è–¥—ñ–≤`)
            let userShot = prompt(`—É –≤–∞—Å –ø–æ–ª–µ ${cell}x${cell} –∫–ª—ñ—Ç–∏–Ω. –ó—Ä–æ–±—ñ—Ç—å –ø–æ—Å—Ç—Ä—ñ–ª [x,y] –≤—ñ–¥ 0 –¥–æ 5. –ö–æ—Ä–∞–±–ª—ñ–≤ ${copySHips.length}. (–î–ª—è –≤–∏—Ö–æ–¥–∞ –≤–≤–µ–¥—ñ—Ç—å -1)`)
            if (userShot.trim() === '-1' || userShot === null) break
            const userShotArr = userShot.split(",").map(Number)
            const searchShips = copySHips.some((ship) =>
                ship.length === userShotArr.length && ship.every((cellElement, cellIndex) => cellElement === userShotArr[cellIndex]))
            if (searchShips) {
                copySHips = copySHips.filter((ship) =>
                    !(ship.length === userShotArr.length && ship.every((cellElement, cellIndex) => cellElement === userShotArr[cellIndex])))
                countShots--
                count++
                alert(`–í—ñ—Ç–∞—é! –í–∏ –ø–æ—Ç–æ–ø–∏–ª–∏ –∫–æ—Ä–∞–±–µ–ª—å! –ö–æ—Ä–∞–±–ª—ñ–≤ –ª–∏—à—Ç–ª–æ—Å—å ${copySHips.length}. –°–Ω–∞—Ä—è–¥—ñ–≤ —É –≤–∞—Å –ª–∏—à–∏–ª–æ—Å—å ${countShots}`)
            } else {
                countShots--
                count++
                alert(`–ù–∞–∂–∞–ª—å –≤–∏ –Ω–µ –≤–ª—É—á–∏–ª–∏. –ö–æ—Ä–∞–±–ª—ñ–≤ –ª–∏—à—Ç–ª–æ—Å—å ${copySHips.length}. –°–Ω–∞—Ä—è–¥—ñ–≤ —É –≤–∞—Å –ª–∏—à–∏–ª–æ—Å—å ${countShots}`)
            }
            recordShots.push(userShotArr)
        }

        let shipStr = ''
        copySHips.length > 0 ? shipStr = `–ö–æ—Ä–∞–±–ª—ñ–≤ –ª–∏—à–∏–ª–æ—Å—å ${copySHips.length} - ${getPrintArray(copySHips)}]`
            : shipStr = '–ö–æ—Ä–∞–±–ª—ñ–≤ –Ω–µ –ª–∏—à–∏–ª–æ—Å—å'

        return [shipStr, count, recordShots]
    }

    function getPrintArray(arr) {
        let str = '\['

        for (const element of arr) {
            str += `\[${element}\],`
        }
        str += '\]'

        return str
    }

    function getPrintMessages(arr) {
        document.write(`
            <div>${arr[0]}</div>
            <div>–í–∏ –∑—Ä–æ–±–∏–ª–∏ –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤ ${arr[1]}</div>
            <div>–í–∞—à—ñ –ø–æ—Å—Ç—Ä—ñ–ª–∏ ${Array.isArray(arr[2]) ? getPrintArray(arr[2]) : arr[2]}</div>
        `)
    }

    document.write(`
        <h2 class="homework__title">–†—ñ—à–µ–Ω–Ω—è:</h2>
        <div>–ú–∞—Å–∏–≤ –∫–æ—Ä–∞–±–ª—ñ–≤ - ${getPrintArray(generateShips)}</div>
        <hr>
    `)

    getPrintMessages(getFight(generateShips, countCell))

    // –¶–µ –º–∏–Ω—É–ª–∏–π –º–æ–∫—Å–∫–∏–π –±—ñ–π —É–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∏–π
    // const countCell = 6
    // const getCreateBattlefield = (num) => Array.from({ length: num }, () => Array(num).fill('0'))
    // const battlefield = getCreateBattlefield(countCell)
    // const getRandomNum = (min, max) => Math.floor(Math.random() * max) + min

    // function getRandomShips(num) {
    //     const ships = []

    //     for (let indexShip = 0; indexShip < num; indexShip++) {
    //         let ship = []
    //         for (let cellShip = 0; cellShip < 2; cellShip++) {
    //             ship[cellShip] = getRandomNum(0, countCell)
    //         }
    //         ships[indexShip] = ship
    //     }

    //     return ships
    // }

    // const getShipsSort = (ships) => ships.filter((ship) => ship.sort((a, b) => a - b))

    // function getShips(ships) {
    //     const randomShips = getRandomShips(ships)
    //     const shipsSort = getShipsSort(randomShips)

    //     return shipsSort
    // }

    // function getAddShipsBattleGround(battleField, ships) {
    //     for (let x = 0; x < battleField.length; x++) {
    //         for (let y = 0; y < battleField[x].length; y++) {
    //             for (let ship = 0; ship < ships.length; ship++) {
    //                 if (ships[ship][0] === x && ships[ship][1] === y)
    //                     battleField[x][y] = '1';
    //             }
    //         }
    //     }

    //     return battleField
    // }

    // function getFight(battleField, ships) {
    //     let countShips = ships.length
    //     let countShots = parseInt(prompt('–°–ª—ñ–ª—å–∫–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–Ω–∞—Ä—è–¥—ñ–≤?', '10'))
    //     let count = 0

    //     while (countShips !== 0 && countShots !== 0) {
    //         alert(`–£ –≤–∞—Å ${countShips} –∫–æ—Ä–∞–±–ª—ñ–≤, –Ω–∞ —ó—Ö –∑–Ω–∏—â–µ–Ω–Ω—è —É–≤–∞—Å —î ${countShots} —Å–Ω–∞—Ä—è–¥—ñ–≤`)
    //         let shot = prompt(`–ó—Ä–æ–±—ñ—Ç—å –ø–æ—Å—Ç—Ä—ñ–ª [x,y], —É –≤–∞—Å –ø–æ–ª–µ ${countCell}x${countCell} –∫–ª—ñ—Ç–∏–Ω. –ö–æ—Ä–∞–±–ª—ñ–≤ ${countShips}. (–î–ª—è –≤–∏—Ö–æ–¥–∞ –≤–≤–µ–¥—ñ—Ç—å -1)`)
    //         if (shot.trim() === '-1' || shot === null) break
    //         const [shotX, shotY] = shot.split(",").map((n) => Number(n))
    //         if (battleField[shotX][shotY] === '1') {
    //             battleField[shotX][shotY] = 'X'
    //             countShips--
    //             countShots--
    //             count++
    //             alert(`–í–∏ –ø–æ—Ç–æ–ø–∏–ª–∏ –∫–æ—Ä–∞–±–µ–ª—å! –õ–∏—à–∏–ª–æ—Å—å ${countShips} –∫–æ—Ä–∞–±–ª—ñ–≤. –£ –≤–∞—Å –ª–∏—à–∏–ª–æ—Å—å ${countShots} —Å–Ω–∞—Ä—è–¥—ñ–≤`)
    //         }
    //         else {
    //             battleField[shotX][shotY] = '*'
    //             countShots--
    //             count++
    //             alert(`–í–∏ –Ω–µ –≤–ª—É—á–∏–ª–∏! –õ–∏—à–∏–ª–æ—Å—å ${countShips} –∫–æ—Ä–∞–±–ª—ñ–≤. –£ –≤–∞—Å –ª–∏—à–∏–ª–æ—Å—å ${countShots} —Å–Ω–∞—Ä—è–¥—ñ–≤`)
    //         }
    //     }

    //     return [battleField, count]
    // }

    // function getPrintMessages(arr) {
    //     let str = '[</br>'

    //     for (let i = 0; i < arr[0].length; i++) {
    //         str += `${arr[0][i]}</br>`
    //     }

    //     str += ']'

    //     document.write(`
    //         <div>–ü–æ–ª–µ –±–æ—é ${str}</div>
    //         <div>–í–∏ –∑—Ä–æ–±–∏–ª–∏ –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤ ${arr[1]}</div>
    //     `)
    // }

    // document.write(`
    //     <h2 class="homework__title">–†—ñ—à–µ–Ω–Ω—è:</h2>
    //     <ul>
    //     <li>–ü—É—Å—Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ 0</li>
    //     <li>–ü–æ—Å—Ç—Ä—ñ–ª *</li>
    //     <li>–ü—ñ–¥–±–∏—Ç–∏–π –∫–æ—Ä–∞–±–µ–ª—å –•</li>
    //     </ul>
    //     <hr>
    // `)

    // const numberShips = 5
    // const ships = getShips(numberShips)
    // const battleGround = getAddShipsBattleGround(battlefield, ships)
    // getPrintMessages(getFight(battleGround, ships))
} else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`)
}