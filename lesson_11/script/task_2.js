'use strict'

// –î–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–∏–±—É—Ç–æ–∫ –ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è.
// 1) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∫–æ–∂–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
// 2) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ —É—Å—ñ—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –ø–æ –¥–Ω—è–º (–∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ —É—Å—ñ—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –∑–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 
//    –ó–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫, —ñ —Ç.–¥.
// 3) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ —Ä–æ–±–æ—á—ñ –¥–Ω—ñ
// 4) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ
// 5) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ —Å–µ—Ä–µ–¥—É
// 6) –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ (–æ–¥–Ω–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤) –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º, —è–∫—ñ —â–æ –±—ñ–ª—å—à—ñ –∑–∞ 200
// 7) –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω —Ç–∏–∂–¥–µ–Ω—å –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
// 8) –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∏–∂–Ω—ñ (—Ä—è–¥–∫–∏) –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —É —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ (—Ä—è–¥–∫—É), 
//    —Ç–æ–±—Ç–æ –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ —Ä—è–¥–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —É –∫–æ–∂–Ω–æ–º—É –∑ —Ü–∏—Ö —Ä—è–¥–∫—ñ–≤
// 9) –£–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏ —Ç–∏–∂–Ω—ñ (—Ä—è–¥–∫–∏) –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º —Å—É–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Ä—è–¥–∫—É 
//    (—Ç–æ–±—Ç–æ –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ –¥–≤–æ—Ö —Ä—è–¥–∫—ñ–≤ —Ç—Ä–µ–±–∞ –∑–Ω–∞–π—Ç–∏ —Å—É–º—É –∫–æ–∂–Ω–æ–≥–æ –∑ —Ä—è–¥–∫—ñ–≤ —ñ 
//    –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ —Ü—ñ —Å—É–º–∏, –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö —Å—É–º –±—É–¥–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, 
//    —è–∫–∏–π –∑ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–µ–Ω —ñ—Ç–∏ —Ä–∞–Ω—ñ—à–µ)

if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    const shopNumber = 10

    const getRandomStore = (dayElement, min, max) => Array.from(
        { length: dayElement },
        () => min + Math.floor(Math.random() * (max - min + 1))
    )

    const getRandomShops = (shopCount, dayCount, min, max) => Array.from(
        { length: shopCount },
        () => getRandomStore(dayCount, min, max)
    )

    const profitShops = getRandomShops(shopNumber, 7, 100, 600)
    const getSortMinMax = (arr) => arr.sort((a, b) => a - b)
    const getSortMaxMin = (arr) => arr.sort((a, b) => b - a)

    document.write(`
        <h2 class="homework__title">–†—ñ—à–µ–Ω–Ω—è:</h2>
        <ul>
            <li>–î–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–∏–±—É—Ç–æ–∫ ${shopNumber} –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è: \[${getPrintStors(profitShops)}\]</li>
        </ul>
        <hr>
    `)

    // 1)
    function getIndividualStoreAmount(stores) {
        // const amountStors = []
        // let storeAmount = 0

        // for (const store of stores) {
        //     for (const element of store) {
        //         storeAmount += element
        //     }
        //     amountStors.push(storeAmount)
        // }

        // –∞–±–æ
        const amountStors = stores.map((store) => store.reduce((prevWeek, week) => prevWeek + week))

        return amountStors
    }

    // 2)
    function getStoreProfitsDay(stores) {
        // const profitDays = new Array(stores[0].length).fill(0)

        // for (let indexStore = 0; indexStore < stores.length; indexStore++) {
        //     for (let indexDay = 0; indexDay < 7; indexDay++) {
        //         switch (indexDay) {
        //             case 0:
        //                 profitDays[indexDay] += stores[indexStore][indexDay]
        //                 break;
        //             case 1:
        //                 profitDays[indexDay] += stores[indexStore][indexDay]
        //                 break;
        //             case 2:
        //                 profitDays[indexDay] += stores[indexStore][indexDay]
        //                 break;
        //             case 3:
        //                 profitDays[indexDay] += stores[indexStore][indexDay]
        //                 break;
        //             case 4:
        //                 profitDays[indexDay] += stores[indexStore][indexDay]
        //                 break;
        //             case 5:
        //                 profitDays[indexDay] += stores[indexStore][indexDay]
        //                 break;
        //             case 6:
        //                 profitDays[indexDay] += stores[indexStore][indexDay]
        //                 break;
        //             default:
        //                 break;
        //         }
        //     }
        // }

        // return profitDays

        // abo
        const profitDays = []

        for (let indexStore = 0; indexStore < stores.length; indexStore++) {
            for (let indexDay = 0; indexDay < 7; indexDay++) {
                if (profitDays[indexDay] === undefined) profitDays[indexDay] = 0
                profitDays[indexDay] += stores[indexStore][indexDay]
            }
        }

        return profitDays
    }

    // 3) 
    function getProfitStoreWorkingDay(stores) {
        const profitStoreWorkingDay = []
        let amountWorkingDay = 0

        for (let indexStore = 0; indexStore < stores.length; indexStore++) {
            for (let indexDay = 0; indexDay < 5; indexDay++) {
                amountWorkingDay += stores[indexStore][indexDay]
            }
            profitStoreWorkingDay.push(amountWorkingDay)
            amountWorkingDay = 0
        }

        return profitStoreWorkingDay
    }

    // 4) 
    function getWeekendProfit(stores) {
        const amountProfitWeekend = []
        let amountWeekend = 0

        for (let indexStore = 0; indexStore < stores.length; indexStore++) {
            for (let indexDay = 5; indexDay < 7; indexDay++) {
                amountWeekend += stores[indexStore][indexDay]
            }
            amountProfitWeekend.push(amountWeekend)
            amountWeekend = 0
        }

        return amountProfitWeekend
    }

    // 5)
    function getMaximumProfitWednesday(stores) {
        const profitWednesday = []

        for (let indexStore = 0; indexStore < stores.length; indexStore++) {
            for (let indexDey = 0; indexDey < 7; indexDey++) {
                if (indexDey === 2) profitWednesday.push(stores[indexStore][indexDey])

            }
        }

        const maxWednesday = Math.max(...profitWednesday)

        return maxWednesday
    }

    // 6)
    function getArrayValueGreater(stores) {
        const valueGreater = stores.flat(2).filter(storValue => storValue > 200)

        return valueGreater
    }

    // 7)
    function getSortWeekAscending(stores) {
        const sortWeeks = stores.filter((store) => getSortMinMax(store))

        return sortWeeks
    }

    // –ó—Ä–æ–±–∏–≤ –≥–ª–∏–±–æ–∫—É –∫–æ–ø—ñ—é –º–∞—Å–∏–≤–∞ –¥–ª—è —Ç–æ–≥–æ —â–æ–± —É –º–µ–Ω–µ –Ω–µ —Å–æ—Ä—Ç—É–≤–∞–≤—Å—è –æ—Å–Ω–æ–≤–Ω–∏–π –º–∞—Å–∏–≤, 
    // –≤ —ñ–Ω–∞–∫—à–æ–º—É –≤–∏–ø–≤–¥–∫—É –≤ –º–µ–Ω–µ —Å–æ–∞—Ç—É—î—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–∏–π –º–∞—Å–∏–≤ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –±—É–ª—å —è–∫–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    const copyProfitShops = JSON.parse(JSON.stringify(profitShops))
    const sortWeekAscending = getSortWeekAscending(copyProfitShops)

    // 8)
    function getSortWeekDescending(stores) {
        const sortWeeks = stores.filter((store) => getSortMaxMin(store))

        return sortWeeks
    }

    const secondCopyProfitShop = JSON.parse(JSON.stringify(profitShops))
    const sortWeekDescending = getSortWeekDescending(secondCopyProfitShop)

    // 9)
    function getSortWeeksDescendingAmount(stores) {
        const amountWeeksDescensing = stores.map((store) => store.reduce((prevWeek, week) => prevWeek + week))

        return getSortMaxMin(amountWeeksDescensing)
    }

    function getPrintStors(arrShops) {
        let str = '<br>'

        for (const shop of arrShops) {
            str += `[${shop}],<br>`
        }

        return str
    }

    function getPrintMessages(str, arr) {
        document.write(`<div style="overflow-x:auto;">${str} - \[${arr}\]</div>`)
    }

    const taskFirst = '1) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∫–æ–∂–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å'
    const taskSecond = '2) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –ø–æ –¥–Ω—è–º'
    const taskThird = '3) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ —Ä–æ–±–æ—á—ñ –¥–Ω—ñ'
    const taskFourth = '4) –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ'
    const taskFifth = '5) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ —Å–µ—Ä–µ–¥—É'
    const taskSixth = '6) –û–¥–Ω–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º, —è–∫—ñ —â–æ –±—ñ–ª—å—à—ñ –∑–∞ 200'
    const taskSeventh = '7) –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω —Ç–∏–∂–¥–µ–Ω—å –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º'
    const taskEighth = '8) –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∏–∂–Ω—ñ (—Ä—è–¥–∫–∏) –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —É —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ (—Ä—è–¥–∫—É)'
    const taskNinth = '9) –£–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏ —Ç–∏–∂–Ω—ñ (—Ä—è–¥–∫–∏) –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º —Å—É–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Ä—è–¥–∫—É'

    getPrintMessages(taskFirst, getIndividualStoreAmount(profitShops))
    getPrintMessages(taskSecond, getStoreProfitsDay(profitShops))
    getPrintMessages(taskThird, getProfitStoreWorkingDay(profitShops))
    getPrintMessages(taskFourth, getWeekendProfit(profitShops))
    getPrintMessages(taskFifth, getMaximumProfitWednesday(profitShops))
    getPrintMessages(taskSixth, getArrayValueGreater(profitShops))
    getPrintMessages(taskSeventh, getPrintStors(sortWeekAscending))
    getPrintMessages(taskEighth, getPrintStors(sortWeekDescending))
    getPrintMessages(taskNinth, getSortWeeksDescendingAmount(sortWeekDescending))
} else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`)
}