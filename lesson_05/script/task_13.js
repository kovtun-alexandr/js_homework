'use strict'

//  –ö–æ–º–ø‚Äô—é—Ç–µ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ —Ä–æ–∑—Ç–∞—à–æ–≤—É—î –æ–¥–∏–Ω–æ—á–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –ø–æ–ª—ñ —Ä–æ–∑–º—ñ—Ä–æ–º N*M. –ú–∞—é—á–∏ –ö —Å–Ω–∞—Ä—è–¥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Ç–æ–ø–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å. 

if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    const battleField = parseInt(prompt('–í–∞—Å –≤—ñ—Ç–∞—î –≥—Ä–∞ –º–æ—Ä–º—å–∫–∏–π –±—ñ–π! –í–∫–∞–∂—ñ—Ç—å –∑–æ–∑–º—ñ—Ä –ø–æ–ª—è N*M', '3'))
    const shipGorizontal = 1 + Math.floor(Math.random() * battleField)
    const shipVertical = 1 + Math.floor(Math.random() * battleField)
    let ship = shipGorizontal.toString() + shipVertical.toString(),
        shotGorizontal,
        shotVertical,
        shotOne = '',
        shotTwo = '',
        shotThree = ''

    for (let shell = 3; shell > 0; shell--) {
        shotGorizontal = prompt(`–£ –≤–∞—Å –ø–æ–ª–µ —Ä–æ–∑–º—ñ—Ä–æ–º ${battleField} –Ω–∞ ${battleField}. –£ –≤–∞—Å —î ${shell} –ø–æ—Å—Ç—Ä—ñ–ª–∞ –∑ 3, –∑—Ä–æ–±—ñ—Ç—å –ø–æ—Å—Ç—Ä—ñ–ª –ø–æ –≥–æ—Ä—ñ–∑–æ–Ω—Ç–∞–ª—ñ`)
        shotVertical = prompt(`–£ –≤–∞—Å –ø–æ–ª–µ —Ä–æ–∑–º—ñ—Ä–æ–º ${battleField} –Ω–∞ ${battleField}. –£ –≤–∞—Å —î ${shell} –ø–æ—Å—Ç—Ä—ñ–ª–∞ –∑ 3, –∑—Ä–æ–±—ñ—Ç—å –ø–æ—Å—Ç—Ä—ñ–ª –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ`)
        switch (shell) {
            case 3:
                shotOne = shotGorizontal.toString() + shotVertical
                break;
            case 2:
                shotTwo = shotGorizontal.toString() + shotVertical
                break;
            case 1:
                shotThree = shotGorizontal.toString() + shotVertical
                break;
            default:
                break;
        }

        if (ship === shotOne || ship === shotTwo || ship === shotThree) {
            alert('–í—ñ—Ç–∞—é! –≤–∏ –ø–æ—Ç–æ–ø–∏–ª–∏ –∫–æ—Ä–∞–±–µ–ª—å!')
            break
        } else {
            if ((shell - 1) === 0) {
                alert(`–ù–∞–∂–∞–ª—å –≤–∏ –Ω–µ –≤–ª—É—á–∏–ª–∏! –£ –≤–∞—Å –Ω–µ –ª–º—à–∏–ª–æ—Å—å –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤`)
            } else {
                alert(`–ù–∞–∂–∞–ª—å –≤–∏ –Ω–µ –≤–ª—É—á–∏–ª–∏! –£ –≤–∞—Å –ª–∏—à–∏–ª–æ—Å—å ${shell - 1} –ø–æ—Å—Ç—Ä—ñ–ª–∞`)
            }
        }
    }

    document.write('<table>')
    for (let i = 1; i <= battleField; i++) {
        document.write('<tr>')
        for (let j = 1; j <= battleField; j++) {
            if (shipGorizontal === i && shipVertical === j)
                if (shipGorizontal == shotOne.charAt(0) && shipVertical == shotOne.charAt(1)) {
                    document.write(`<td class="shot rip" width="40px" height="40px" style="background:red;position:relative;"></td>`)
                } else if (shipGorizontal == shotTwo.charAt(0) && shipVertical == shotTwo.charAt(1)) {
                    document.write(`<td class="shot rip" width="40px" height="40px" style="background:red;position:relative;"></td>`)
                } else if (shipGorizontal == shotThree.charAt(0) && shipVertical == shotThree.charAt(1)) {
                    document.write(`<td class="shot rip" width="40px" height="40px" style="background:red;position:relative;"></td>`)
                } else {
                    document.write(`<td width="40px" height="40px" style="background:gray;position:relative;"></td>`)
                }
            else {
                if (shotOne.charAt(0) == i && shotOne.charAt(1) == j || shotTwo.charAt(0) == i && shotTwo.charAt(1) == j || shotThree.charAt(0) == i && shotThree.charAt(1) == j)
                    document.write(`<td class="shot" width="40px" height="40px" style="background:lightblue;position:relative;"></td>`)
                else
                    document.write(`<td width="40px" height="40px" style="background:lightblue;position:relative;"></td>`)
            }

        }
        document.write('</tr>')

    }
    document.write('</table>')

    if (ship === shotOne || ship === shotTwo || ship === shotThree)
        document.write('–í—ñ—Ç–∞—é! –≤–∏ –ø–æ—Ç–æ–ø–∏–ª–∏ –∫–æ—Ä–∞–±–µ–ª—å!')
    else
        document.write('–ù–∞–∂–∞–ª—å –≤–∏ –Ω–µ –≤–ª—É—á–∏–ª–∏ –≤ –∫–æ—Ä–∞–±–µ–ª—å!')
} else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`)
}