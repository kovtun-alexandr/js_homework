"use strict";
// –°–∫–ª–∞–¥. –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –Ω–∞ —Å–∫–ª–∞–¥—ñ: –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É, –æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É, 
// –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ñ—ñ—Ä–º–∞ –≤–∏—Ä–æ–±–Ω–∏–∫ (–Ω–∞–∑–≤–∞, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä). –û—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é/–≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤, 
// —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –Ω–∞–∑–≤–æ—é —Ñ—ñ—Ä–º–∏
if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    class Companies {
        constructor(name, regNumber) {
            this.name = name;
            this.regNumber = regNumber;
        }
    }
    class Product {
        constructor(name, unit, quantity, company) {
            this.name = name;
            this.unit = unit;
            this.quantity = quantity;
            this.company = company;
        }
    }
    const —Åompanies = [
        new Companies("Roshen", "R001"),
        new Companies("Nestle", "N002"),
        new Companies("Mondelez", "M003"),
        new Companies("Konti", "K004"),
        new Companies("ABK", "A005"),
    ];
    const names = ['–ü–µ—á–∏–≤–æ', '–¶—É–∫–µ—Ä–∫–∏', '–í–∞—Ñ–ª—ñ', '–ü—Ä—è–Ω–∏–∫–∏'];
    const products = [];
    for (let i = 1; i <= 50; i++) {
        const unit = 1000;
        const quantity = 10 + Math.floor(Math.random() * 41);
        const company = —Åompanies[Math.floor(Math.random() * —Åompanies.length)];
        const name = names[Math.floor(Math.random() * names.length)];
        products.push(new Product(name, unit, quantity, company));
    }
    class Storage {
        constructor(initProductsList = []) {
            this.productList = [...initProductsList];
        }
        /**
         * Add the product to the end of the array
         * @param product product name, package weight, quantity, manufacturer (name, registration number)
         */
        addProduct(product) {
            this.productList.push(product);
        }
        /**
         * we search for matches by product name and company name and group them by increasing number
         * @returns a sorted and grouped arra
         */
        getSorting() {
            return this.productList.reduce((acc, curr) => {
                const found = acc.find(p => p.name === curr.name && p.company.name === curr.company.name);
                if (found) {
                    found.quantity += curr.quantity;
                }
                else {
                    acc.push(new Product(curr.name, curr.unit, curr.quantity, curr.company));
                }
                return acc;
            }, []);
        }
        /**
         *
         * @param productName we give the product name
         * @param companyName we are changing the company name
         * @param weight we transmit the weight of the shipped goods in grams
         * @returns if a product is found, we load the specified quantity and return the product
         */
        shipProduct(productName, companyName, weight) {
            this.productList = this.getSorting();
            const product = this.productList.find((el) => el.name === productName && el.company.name === companyName);
            if (!product) {
                console.log('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }
            if ((product.quantity * product.unit) < weight) {
                console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ');
                return false;
            }
            product.quantity -= (weight / 1000);
            console.log(`–í—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${(weight / 1000)} –∫–≥ ${product.name} –≤—ñ–¥ ${product.company.name}`);
            return product;
        }
        /**
         * output a list of products to the console
         */
        toString() {
            console.log(this.productList);
        }
    }
    document.write(`
        <h2 class="homework__title">–†—ñ—à–µ–Ω–Ω—è:</h2>
        <div>–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–Ω–∞ –ø–æ–±–∞—á–∏—Ç–∏ —É –∫–æ–Ω—Å–æ–ª—ñ!</div>
        <hr>
    `);
    console.log(products);
    const storage = new Storage(products);
    storage.addProduct(new Product('–í–∞—Ñ–ª—ñ', 1000, 20, new Companies("Nestle", "N002")));
    storage.getSorting();
    storage.shipProduct('–¶—É–∫–µ—Ä–∫–∏', 'Nestle', 10000);
    storage.toString();
}
else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`);
}
