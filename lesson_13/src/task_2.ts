// –ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∑–∞–º–∏–∫–∞–Ω—å —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä, —Ç–æ–±—Ç–æ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –±—É–¥–µ –ø–æ—Å—Ç—É–ø–æ–≤–æ –∑–∞ –æ–∫—Ä–µ–º–∏–º–∏ –≤–∏–∫–ª–∏–∫–∞–º–∏ 
// –≤–∏–¥–∞–≤–∞—Ç–∏ –ø–æ –æ–¥–Ω—É –±—É–∫–≤—É –Ω–∞–ø–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω—å–æ–≥–æ —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ –≥—Ä—É ¬´–ü—Ä–µ–∫–ª–∞–¥–∞—á¬ª. 
// –í–∏–≤–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–ø–∏—Å —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞ —ñ –ø–æ –æ–¥–Ω—É –±—É–∫–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞. 
// –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–≥–∞–¥–∞–Ω–∏—Ö –±—É–∫–≤.

if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    const words: string[] = ['Dog', 'Sun', 'Book', 'Tree', 'Milk']
    const answers: string[] = ['–°–æ–±–∞–∫–∞', '–°–æ–Ω—Ü–µ', '–ö–Ω–∏–≥–∞', '–î–µ—Ä–µ–≤–æ', '–ú–æ–ª–æ–∫–æ']
    const descriptions: string[] = [
        '–î–æ–º–∞—à–Ω—è —Ç–≤–∞—Ä–∏–Ω–∞, –Ω–∞–π–∫—Ä–∞—â–∏–π –¥—Ä—É–≥ –ª—é–¥–∏–Ω–∏.',
        '–í–µ–ª–∏–∫–µ —Å–≤—ñ—Ç–∏–ª–æ, —â–æ –¥–∞—î —Å–≤—ñ—Ç–ª–æ –π —Ç–µ–ø–ª–æ –ó–µ–º–ª—ñ.',
        '–ü—Ä–µ–¥–º–µ—Ç —ñ–∑ –±–∞–≥–∞—Ç—å–º–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏, —É —è–∫–æ–º—É —î —Ç–µ–∫—Å—Ç.',
        '–†–æ—Å–ª–∏–Ω–∞ –∑ –∫–æ—Ä—ñ–Ω–Ω—è–º, —Å—Ç–æ–≤–±—É—Ä–æ–º —ñ –∫—Ä–æ–Ω–æ—é.',
        '–ë—ñ–ª–∏–π –Ω–∞–ø—ñ–π, —è–∫–∏–π –¥–∞—é—Ç—å –∫–æ—Ä–æ–≤–∏.'
    ]
    /**
     * the function generates a random number from minimum to maximum value
     * @param min minimum value
     * @param max maximum value
     * @returns a random generated number
     */
    const randomNum = (min: number, max: number): number => (min + Math.floor(Math.random() * (max - min + 1)))
    /**
     * The function creates a collection from an array
     * @param words accepts a bunch of words in English
     * @param descriptions accepts an array of word descriptions
     * @param answers accepts an array of words in Ukrainian
     * @returns an array of words in English, Ukrainian and a description
     */
    function getRandom–°ollection(words: string[], answers: string[], descriptions: string[]): string[] {
        const max: number = words.length - 1
        const num: number = randomNum(0, max)

        return [words[num], answers[num], descriptions[num]]
    }

    const collectionWord = getRandom–°ollection(words, answers, descriptions)

    /**
     * Game functionality is being executed (I have very complex circuits, so artificial intelligence did it.)
     * @param arr accepts an array of words in English, Ukrainian and a description
     */
    function game(arr: string[]) {
        const [englishWord, ukrWord, description] = arr

        alert('–í–∞—Å –≤—ñ—Ç–∞—î –≥—Ä–∞ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á! –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≥–∞–¥–∞—Ç–∏ —Å–ª–æ–≤–æ –ø–æ –ª—ñ—Ç–µ—Ä–∞—Ö!')

        /**
         * the function outputs the word by letters
         * @param word takes the floor
         * @returns the word one letter at a time until it ends
         */
        function makeIterator(word: string):any {
            let index:number = 0

            return function():string {
                if (index < word.length) {
                    const letter:string = word[index]
                    index++;
                    return letter 
                } else {
                    return '–°–ª–æ–≤–æ –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å!'
                }
            }
        }

        /**
         * the function gives a hint to the user in the form of letters of an English word
         * @param word takes the floor
         * @returns a function that makes a word hint from letters
         */
        function makeHintIterator(word: string):any {
            let index:number = 0

            return function() {
                if (index <= word.length) {
                    const part:string = word.slice(0, index)
                    if (word[index] !== undefined) {
                        alert(`–ü—ñ–¥–∫–∞–∑–∞–∫–∞: –ª—ñ—Ç–µ—Ä–∞ ‚Ññ${index + 1} - ${word[index]}. –ß–∞—Å—Ç–∏–Ω–∞ —Å–ª–æ–≤–∞ ${index <= 0 ? word[index] : part}`)
                    } else {
                        alert(`–ü—ñ–¥–∫–∞–∑–∞–∫–∞: –¶–µ —Å–ª–æ–≤–æ ${index <= 0 ? word[index] : part}`)
                    }
                    index++
                } else {
                    alert(`–¶–µ —Å–ª–æ–≤–æ: ${word}`)
                }
            }
        }

        const nextLetter = makeIterator(ukrWord)
        const nextHint = makeHintIterator(englishWord)

        let correctCount:number = 0;
        
        alert(`–û–ø–∏—Å —Å–ª–æ–≤–∞: ${description}`)

        let letterFromIterator:string = nextLetter()
        while (letterFromIterator !== '–°–ª–æ–≤–æ –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å!') {
            const hint:string = nextHint()
            const userInput:string = prompt('–í–≤–µ–¥—ñ—Ç—å –±—É–∫–≤—É:') || ''
            if (userInput === letterFromIterator) {
                correctCount++;
                alert(`–í–∏ –≤–≥–∞–¥–∞–ª–∏: ${userInput}`)
            }

            letterFromIterator = nextLetter()
        }

        alert(`–í–∏ –≤–≥–∞–¥–∞–ª–∏, —Ü–µ –±—É–ª–æ ${ukrWord}! –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–≥–∞–¥–∞–Ω–∏—Ö –ª—ñ—Ç–µ—Ä: ${correctCount} —ñ–∑ ${ukrWord.length}`)
    }

    game(collectionWord)
} else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`)
}