"use strict";
// 1) –î–∞–Ω–æ –º–∞—Å–∏–≤ —ñ–º–µ–Ω. –ó–∞—Å—Ç–æ—Å–æ–≤—É—é—á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –±—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ—à—É–∫ –≤–∏–∑–Ω–∞—á–∏—Ç–∏,
//    —á–∏ —î —É –º–∞—Å–∏–≤—ñ —ñ–º‚Äô—è ¬´Olga¬ª —ñ –ø—ñ–¥ —è–∫–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º.
// 2) –î–∞–Ω–æ –º–∞—Å–∏–≤ —ñ–º–µ–Ω. –ó–∞—Å—Ç–æ—Å–æ–≤—É—é—á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –±—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ—à—É–∫ –≤–∏–∑–Ω–∞—á–∏—Ç–∏,
//    —á–∏ —î —É –º–∞—Å–∏–≤—ñ —ñ–º‚Äô—è –¥–æ–≤–∂–∏–Ω–æ—é 5 —Å–∏–º–≤–æ–ª—ñ–≤ —ñ –ø—ñ–¥ —è–∫–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º.
if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    const names = [
        "Oleksandr",
        "Andrii",
        "Mykola",
        "Petro",
        "Volodymyr",
        "Yurii",
        "Taras",
        "Stepan",
        "Vasyl",
        "Olga",
        "Bohdan",
        "Kateryna",
        "Oksana",
        "Tetiana",
        "Natalia",
        "Halyna",
        "Iryna",
        "Larysa",
        "Olena",
        "Mariia",
        "Anastasiia"
    ];
    /**
     * The function sorts an array of names
     * @param arr accepts an array of names
     * @returns an array of sorted names
     */
    const getSortArr = (arr) => {
        let indexEnd = arr.length;
        for (let i = 0; i < indexEnd; i++) {
            for (let j = 0; j < indexEnd - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    const temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    };
    // 1)
    /**
     * The function searches for the given name and returns its index
     * @param arr accepts an array of names
     * @param name accepts a search value
     * @returns the index of the specified name if it is present, otherwise returns -1
     */
    const getSearchNameIndex = (names, name) => {
        let left = 0;
        let right = names.length - 1;
        const searchName = name.toLocaleLowerCase();
        while (left <= right) {
            const mid = Math.floor((left + right) / 2);
            const midName = names[mid].toLocaleLowerCase();
            if (midName === searchName) {
                return mid;
            }
            else if (midName < searchName) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }
        return -1;
    };
    // 2)
    /**
     * The function sorts an array of names by word length
     * @param names accepts an array of names
     * @returns a sorted array of names by word length
     */
    const sortByLength = (names) => {
        return names.sort((a, b) => a.length - b.length);
    };
    /**
     * The function searches for a name by length
     * @param arr accepts an array of names
     * @param num pass the number of characters
     * @returns an array with name and index arrays with the specified length of letters
     */
    const getLookingShorterName = (sortNames, num) => {
        const result = [];
        let left = 0;
        let right = sortNames.length - 1;
        while (left <= right) {
            const mid = Math.floor((left + right) / 2);
            const midLen = sortNames[mid].length;
            if (midLen === num) {
                let i = mid;
                while (i >= 0 && sortNames[i].length === num) {
                    result.unshift([sortNames[i], i]);
                    i--;
                }
                i = mid + 1;
                while (i < sortNames.length && sortNames[i].length === num) {
                    result.push([sortNames[i], i]);
                    i++;
                }
                return result;
            }
            else if (midLen < num) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }
        return result;
    };
    /**
     * Displays the results of a two-dimensional array on the screen.
     * @param str accepts part of the task condition
     * @param arr accepts a two-dimensional array of name and index
     */
    function getPrintMessages(str, arr) {
        let arrStrPrint = '';
        for (let i = 0; i < arr.length; i++) {
            arrStrPrint += '<li>';
            for (let j = 0; j < arr[i].length; j++) {
                if (j !== 1)
                    arrStrPrint += `\"${arr[i][j]}\"`;
                else
                    arrStrPrint += ` –º–∞—î —ñ–Ω–¥–µ–∫—Å - ${arr[i][j]}`;
            }
            arrStrPrint += '</li>';
        }
        document.write(`
            <div>${str} –∑–Ω–∞–π–¥–µ–Ω–æ: ${arr.length} —ñ–º–µ–Ω</div>
            <ul>${arrStrPrint}</ul>
        `);
    }
    document.write(`
        <h2 class="homework__title">–†—ñ—à–µ–Ω–Ω—è:</h2>
        <div>–í –Ω–∞—Å —î –º–∞—Å–∏–≤ —ñ–º–µ–Ω: </br> \[${names}\]</div>
        <hr>
    `);
    const sortNames = [...getSortArr(names)];
    document.write(`
        <div>–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º: </br> \[${sortNames}\]</div>
    `);
    const searchName = prompt('–Ø–∫–µ —ñ–º—è –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏?', 'Olga');
    const taskFirst = `1) –£ –º–∞—Å–∏–≤—ñ —ñ–º‚Äô—è \"${searchName}\"`;
    const taskSecond = '2) —É –º–∞—Å–∏–≤—ñ —ñ–º‚Äô—è –¥–æ–≤–∂–∏–Ω–æ—é 5 —Å–∏–º–≤–æ–ª—ñ–≤';
    if (searchName !== null) {
        const index = getSearchNameIndex(sortNames, searchName);
        if (index >= 0) {
            document.write(`
                ${taskFirst} - –º–∞—î —ñ–Ω–¥–µ–∫—Å ${index}
            `);
        }
        else {
            document.write(`
                ${taskFirst} - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–µ
            `);
        }
    }
    else {
        document.write('1) –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ —ñ–º—è!');
    }
    const sortLehgs = [...sortByLength(names)];
    document.write(`
        <div></div>
        <div>–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é: </br> \[${sortLehgs}\]</div>
    `);
    getPrintMessages(taskSecond, getLookingShorterName(sortLehgs, 5));
}
else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`);
}
