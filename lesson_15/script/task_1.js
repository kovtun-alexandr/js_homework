"use strict";
//  –†–æ–∑—Ä–æ–±–∏—Ç–∏ –∫–ª–∞—Å MultChecker –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –º–Ω–æ–∂–µ–Ω–Ω—è
// –ü–æ–ª—è     –ß–∏—Å–ª–æ, —è–∫–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—Ç–∏–Ω–∏ —Ç–∞–±–ª–∏—Ü—ñ –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ 7)
//          –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
//          –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
// –ú–µ—Ç–æ–¥–∏   –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É (–º–µ—Ç–æ–¥ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –≤–∏–∑–Ω–∞—á–∞—î –¥—Ä—É–≥–µ —á–∏—Å–ª–æ, –ø–µ—Ä—à–µ —á–∏—Å–ª–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ)
//          –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
//          render - –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –µ–∫—Ä–∞–Ω
if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    const firstFactor = Number(prompt('–í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ —è–∫–µ –±—É–¥–µ –º–Ω–æ–∂–Ω–∏–∫–æ–º:(–∑–∞ –∑–∞–º–æ–≤—á–µ–Ω–Ω—è–º 7)')) || 7;
    alert(`–£ –≤–∞—Å –±—É–¥–µ —Ç–∞–±–ª–∏—Ü—è –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ ${firstFactor}`);
    class MultChecker {
        constructor(num) {
            /**
             * the function generates a random number from minimum to maximum value
             * @param min minimum value
             * @param max maximum value
             * @returns a random generated number
             */
            this.randomNum = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
            /**
             * the function performs multiplication
             * @param a takes a number a
             * @param b takes a number b
             * @returns the result of multiplying a by b
             */
            this.multiplication = (a, b) => a * b;
            this.multiplier = num;
            this.correctAnswers = 0;
            this.wrongAnswers = 0;
            this.examples = [];
        }
        /**
         * the function generates an array of objects with examples
         * @returns an array of objects with examples
         */
        generationExample() {
            const numberExamples = Number(prompt('–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –≤—ñ–¥ 1 –¥–æ 9: (–∑–∞ –∑–∞–º–æ–≤—á–µ–Ω–Ω—è–º 5)')) || 5;
            for (let i = 0; i < numberExamples; i++) {
                const example = {
                    firstFactor: this.multiplier,
                    secondFactor: this.randomNum(1, 10),
                    product: 0
                };
                example.product = this.multiplication(example.firstFactor, example.secondFactor);
                this.examples.push(example);
            }
            return this.examples;
        }
        /**
         * The function displays examples and asks the user questions, checks whether
         * the user answered correctly and records the number of correct and incorrect answers.
         */
        checkingAnswer() {
            for (const element of this.examples) {
                const productAnswer = Number(prompt(`${element.firstFactor} * ${element.secondFactor} = ?`));
                if (productAnswer === element.product)
                    this.correctAnswers++;
                else
                    this.wrongAnswers++;
            }
        }
        /**
         * The function displays the number of correct and incorrect answers on the screen.
         */
        render() {
            this.generationExample();
            this.checkingAnswer();
            document.write(` * –ø—Ä–∞–≤–µ–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–µ–π - ${this.correctAnswers} <br> * –Ω–µ –ø—Ä–∞–≤–µ–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π - ${this.wrongAnswers}`);
        }
    }
    document.write(`
        <h2 class="homework__title">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:</h2>
        <hr>     
    `);
    const multChecker = new MultChecker(firstFactor);
    multChecker.render();
}
else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`);
}
