'use strict'

// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É, —â–æ –≤–∏–±–∏—Ä–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º <input type="color">.
// –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ü–µ–π –∫–æ–ª—ñ—Ä —ñ –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ. –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å 
// –∑–º—ñ–Ω –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω–æ–≥–æ —Å–µ–∞–Ω—Å—É.

if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
    class BGColor {
        constructor(bodyEl, inputEl, btnEl) {
            this.bodyEl = document.querySelector(bodyEl)
            this.inputEl = document.querySelector(inputEl)
            this.btnEl = document.querySelector(btnEl)
            this.count = parseInt(sessionStorage.getItem('count')) || 0 
            this.addColor()

            this.btnEl.addEventListener('click', this.changeColor.bind(this))
            window.addEventListener('storage', this.onChangeStorage)
        }

        changeColor() {
            const countEl = document.getElementById('count')

            countEl.innerText = this.countChange()
    
            localStorage.setItem('color', this.inputEl.value)
            this.bodyEl.style.backgroundColor = localStorage.getItem('color')
        }

        addColor() {
            const color = localStorage.getItem('color')

            console.log(color)
    
            if(!color) {
                this.inputEl.value = this.GetBGColorBody()
            } else {
                this.bodyEl.style.backgroundColor = color
                this.inputEl.value = color
            }
        }

        countChange() {
            this.count++

            sessionStorage.setItem('count', this.count)

            return this.count
        }

        onChangeStorage() {
            this.addColor()
        }

        getBGColorBody() {
            const style = window.getComputedStyle(this.bodyEl)
            const bgColor = style.backgroundColor.replace(/rgb\(|\)/g, '')
            const [r, g, b] = bgColor.split(',').map(num => parseInt(num.trim()))

            return this.rgbToHex(r, g, b)
        }

        rgbToHex(r, g, b) {
            function componentToHex(c) {
                const hex = c.toString(16)
                return hex.length === 1 ? "0" + hex : hex
            }
            
            return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
        }
    }
    
    window.addEventListener('load', () => {
        document.querySelector('form').addEventListener('submit', (e) => {e.preventDefault()})
        
        const bgColor = new BGColor('body', '.form__input', '.form__btn')
    })
} else {
    alert(`–ù–∞–∂–∞–ª—å –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ç–µ—Å—Ç–∞ üòû`)
}